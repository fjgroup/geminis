# Script para eliminar duplicados respetando principios SOLID
# Mantiene solo la versi√≥n hexagonal (Single Responsibility + Dependency Inversion)

Write-Host "üóëÔ∏è ELIMINANDO DUPLICADOS - RESPETANDO PRINCIPIOS SOLID" -ForegroundColor Green
Write-Host "======================================================" -ForegroundColor Green
Write-Host ""

# PRINCIPIO SOLID APLICADO:
# - Single Responsibility: Cada controlador tiene una sola responsabilidad en su dominio
# - Open/Closed: Mantenemos la versi√≥n extensible (hexagonal)
# - Dependency Inversion: Mantenemos la versi√≥n que depende de abstracciones (use cases)

Write-Host "üìã CONTROLADORES DE PRODUCTS A ELIMINAR (MVC Tradicional):" -ForegroundColor Yellow

# Lista de controladores duplicados de Products en ubicaci√≥n MVC tradicional
$duplicatedControllers = @(
    "AdminProductController.php",
    "AdminProductControllerRefactored.php", 
    "AdminProductTypeController.php",
    "ProductController.php",
    "ConfigurableOptionController.php",
    "ConfigurableOptionGroupController.php",
    "DiscountPercentageController.php"
)

$mvcPath = "app\Http\Controllers\Admin"
$hexagonalPath = "app\Domains\Products\Infrastructure\Http\Controllers\Admin"

foreach ($controller in $duplicatedControllers) {
    $mvcFile = "$mvcPath\$controller"
    $hexagonalFile = "$hexagonalPath\$controller"
    
    if ((Test-Path $mvcFile) -and (Test-Path $hexagonalFile)) {
        Write-Host "  üîç Verificando: $controller" -ForegroundColor Cyan
        
        # Verificar que la versi√≥n hexagonal existe y es v√°lida
        $hexagonalContent = Get-Content $hexagonalFile -Raw
        
        if ($hexagonalContent -match "namespace App\\Domains\\Products\\Infrastructure\\Http\\Controllers") {
            # ‚úÖ PRINCIPIO SOLID: Mantener versi√≥n con Dependency Inversion
            Remove-Item $mvcFile -Force
            Write-Host "    ‚úÖ ELIMINADO (MVC): $mvcFile" -ForegroundColor Green
            Write-Host "    ‚úÖ MANTENIDO (Hexagonal): $hexagonalFile" -ForegroundColor Green
        } else {
            Write-Host "    ‚ö†Ô∏è SALTADO: Versi√≥n hexagonal no v√°lida" -ForegroundColor Yellow
        }
    } elseif (Test-Path $mvcFile) {
        Write-Host "  ‚ö†Ô∏è Solo existe versi√≥n MVC: $controller" -ForegroundColor Yellow
    } elseif (Test-Path $hexagonalFile) {
        Write-Host "  ‚úÖ Solo existe versi√≥n Hexagonal: $controller" -ForegroundColor Green
    }
    
    Write-Host ""
}

Write-Host "üóëÔ∏è ELIMINANDO CONTROLADORES API DUPLICADOS:" -ForegroundColor Yellow

# Eliminar controladores API duplicados
$apiControllers = @(
    "ProductController.php",
    "PricingController.php"
)

$apiMvcPath = "app\Http\Controllers\Api"
$apiHexagonalPath = "app\Domains\Products\Infrastructure\Http\Controllers\Api"

foreach ($controller in $apiControllers) {
    $mvcFile = "$apiMvcPath\$controller"
    $hexagonalFile = "$apiHexagonalPath\$controller"
    
    if ((Test-Path $mvcFile) -and (Test-Path $hexagonalFile)) {
        Remove-Item $mvcFile -Force
        Write-Host "  ‚úÖ ELIMINADO (MVC API): $mvcFile" -ForegroundColor Green
        Write-Host "  ‚úÖ MANTENIDO (Hexagonal API): $hexagonalFile" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "üóëÔ∏è ELIMINANDO FORM REQUESTS DUPLICADOS:" -ForegroundColor Yellow

# Eliminar Form Requests duplicados
$requests = @(
    "StoreProductRequest.php",
    "UpdateProductRequest.php",
    "StoreProductTypeRequest.php", 
    "UpdateProductTypeRequest.php",
    "StoreProductPricingRequest.php",
    "UpdateProductPricingRequest.php",
    "StoreConfigurableOptionRequest.php",
    "UpdateConfigurableOptionRequest.php",
    "StoreConfigurableOptionGroupRequest.php",
    "UpdateConfigurableOptionGroupRequest.php"
)

$requestsMvcPath = "app\Http\Requests\Admin"
$requestsHexagonalPath = "app\Domains\Products\Infrastructure\Http\Requests"

foreach ($request in $requests) {
    $mvcFile = "$requestsMvcPath\$request"
    $hexagonalFile = "$requestsHexagonalPath\$request"
    
    if ((Test-Path $mvcFile) -and (Test-Path $hexagonalFile)) {
        Remove-Item $mvcFile -Force
        Write-Host "  ‚úÖ ELIMINADO (MVC Request): $mvcFile" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "üéØ PRINCIPIOS SOLID APLICADOS:" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Host "‚úÖ S - Single Responsibility: Cada controlador maneja solo su dominio" -ForegroundColor Green
Write-Host "‚úÖ O - Open/Closed: Versi√≥n hexagonal es extensible sin modificaci√≥n" -ForegroundColor Green  
Write-Host "‚úÖ L - Liskov Substitution: Controladores hexagonales son intercambiables" -ForegroundColor Green
Write-Host "‚úÖ I - Interface Segregation: Dependencias espec√≠ficas por responsabilidad" -ForegroundColor Green
Write-Host "‚úÖ D - Dependency Inversion: Controladores dependen de abstracciones (Use Cases)" -ForegroundColor Green
Write-Host ""

Write-Host "üéâ ELIMINACI√ìN COMPLETADA - SOLO VERSIONES HEXAGONALES MANTENIDAS" -ForegroundColor Green
Write-Host "üìä RESULTADO: Arquitectura limpia respetando principios SOLID" -ForegroundColor Green
